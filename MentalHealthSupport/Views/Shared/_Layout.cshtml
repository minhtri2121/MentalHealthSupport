<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MentalHealthSupport</title>
    <!-- Font Awesome -->
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&display=swap"
          rel="stylesheet">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" />

    <!-- Animate CSS -->
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

    <!-- Custom CSS -->
    <link rel="stylesheet"
          href="~/css/site.css"
          asp-append-version="true" />
</head>

<body>
    <!-- Pre-loader -->
    <div id="preloader">
        <div class="loader">
            <svg class="heart" viewBox="0 0 32 32">
                <path d="M16,28.261c0,0-14-7.926-14-17.046c0-9.356,13.159-10.399,14-0.454c1.011-9.938,14-8.903,14,0.454
                    C30,20.335,16,28.261,16,28.261z" />
            </svg>
            <p>Đang tải...</p>
        </div>
    </div>

    @functions {
        bool IsActive(string controller, string? action = null)
        {
            var currentController = ViewContext.RouteData.Values["Controller"]?.ToString();
            var currentAction = ViewContext.RouteData.Values["Action"]?.ToString();
            return currentController == controller && (action == null || currentAction == action);
        }
    }

    <!-- Nút mở popup chat -->
    <button type="button" class="btn btn-primary position-fixed bottom-1 end-0 m-4" id="openChatModal">
        <i class="fas fa-comment"></i> Chat
    </button>

    <!-- Chat Modal -->
    <div class="modal fade" id="chatModal" tabindex="-1" aria-labelledby="chatModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="chatModalLabel">
                        <i class="fas fa-user-tie me-2"></i>Chat với Chuyên gia
                        <span class="badge bg-danger ms-3" id="statusBadge">
                            <span class="status-dot offline me-1"></span>Offline
                        </span>
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                
                <div class="modal-body p-0">
                    <!-- Chat Box -->
                    <div id="chatBox" class="p-3 bg-light" style="height: 400px; overflow-y: auto;">
                        <div class="text-center text-muted" id="emptyState">
                            <i class="fas fa-comments fa-3x mb-3 text-secondary"></i>
                            <p>Chưa có tin nhắn nào. Bắt đầu cuộc trò chuyện!</p>
                        </div>
                    </div>
                    
                    <!-- Input Area -->
                    <div class="p-3 border-top">
                        <div class="input-group mb-3">
                            <input type="text" id="messageInput" class="form-control" placeholder="Nhập tin nhắn..." disabled>
                            <button class="btn btn-primary" type="button" id="sendButton" disabled>
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                        
                        <div class="d-grid gap-2 d-md-flex justify-content-md-center">
                            <button class="btn btn-success me-md-2" type="button" id="startChat">
                                <i class="fas fa-play me-1"></i>Bắt đầu Chat
                            </button>
                            <button class="btn btn-danger" type="button" id="endChat" disabled>
                                <i class="fas fa-stop me-1"></i>Kết thúc Chat
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Header -->
    <header>
        <nav class="navbar navbar-expand-lg navbar-light fixed-top shadow-sm">
            <div class="container">
                <a class="navbar-brand" href="/">
                    <img src="@Url.Content("~/images/Logo.png")" alt="Logo" height="40" />
                    <span class="ms-2 fw-bold text-primary">MentalHealthSupport</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                        <li class="nav-item">
                            <a class="nav-link @(IsActive("Home") ? "active" : "")"
                               href="@Url.Action("Index", "Home")">Trang chủ</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(IsActive("Consultants") ? "active" : "")"
                                href="@Url.Action("Index", "Consultants")">Chuyên gia</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(IsActive("Baikiemtra") ? "active" : "")"
                               href="@Url.Action("Index", "Baikiemtra")">Bài kiểm tra</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(IsActive("Article") ? "active" : "")"
                               asp-controller="About" asp-action="Index">Bài viết</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link @(IsActive("About", "Index") ? "active" : "")"
                               asp-controller="About" asp-action="Index">Về chúng tôi</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav ms-auto align-items-center">
                        @if (Context.Session.GetInt32("UserId") == null)
                        {
                            <li class="nav-item">
                                <a class="nav-link btn px-3" asp-controller="Account" asp-action="Login">Đăng nhập</a>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle fw-semibold d-flex align-items-center" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    @Context.Session.GetString("FullName")
                                    <i class="bi bi-chevron-down ms-1"></i>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="Manage">Hồ sơ</a></li>
                                    <li><a class="dropdown-item" asp-controller="Account" asp-action="Logout">Đăng xuất</a></li>
                                </ul>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="container">
        <main role="main" class="flex-grow-1 pb-3">
            @RenderBody()
        </main>
    </div>

    <!-- Footer -->
    <footer class="footer bg-dark text-white py-5">
        <div class="container py-5">
            <div class="row d-flex flex-wrap justify-content-between">
                <div class="col-lg-3 col-md-6">
                    <h4 class="fw-bold mb-4">MentalHealthSupport</h4>
                    <div class="social-links">
                        <a href="#" class="text-white me-3"><i class="fab fa-facebook-f"></i></a>
                        <a href="#" class="text-white me-3"><i class="fab fa-twitter"></i></a>
                        <a href="#" class="text-white me-3"><i class="fab fa-instagram"></i></a>
                        <a href="#" class="text-white me-3"><i class="fab fa-linkedin-in"></i></a>
                        <a href="#" class="text-white"><i class="fab fa-youtube"></i></a>
                    </div>
                </div>
                <div class="col-lg-3 col-md-6">
                    <h5 class="fw-bold mb-4">Liên Kết Nhanh</h5>
                    <ul class="list-unstyled footer-links">
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Trang Chủ</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Về Chúng Tôi</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Dịch Vụ</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Chuyên Gia</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Blog</a></li>
                        <li><a href="#" class="text-white-50 text-decoration-none">Liên Hệ</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6">
                    <h5 class="fw-bold mb-4">Dịch Vụ</h5>
                    <ul class="list-unstyled footer-links">
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Tư Vấn Trực Tuyến</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Tư Vấn Trực Tiếp</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Kiểm Tra Tâm Lý</a></li>
                        <li class="mb-2"><a href="#" class="text-white-50 text-decoration-none">Khóa Học</a></li>
                        <li><a href="#" class="text-white-50 text-decoration-none">Seminar</a></li>
                    </ul>
                </div>
                <div class="col-lg-3 col-md-6">
                    <h5 class="fw-bold mb-4">Liên Hệ</h5>
                    <ul class="list-unstyled footer-contact">
                        <li class="d-flex mb-3">
                            <i class="fas fa-map-marker-alt text-primary me-3 mt-1"></i>
                            <span class="text-white-50">123 Đường Nguyễn Văn Linh, Quận 7, TP. Hồ Chí Minh</span>
                        </li>
                        <li class="d-flex mb-3">
                            <i class="fas fa-phone-alt text-primary me-3 mt-1"></i>
                            <span class="text-white-50">+84 28 1234 5678</span>
                        </li>
                        <li class="d-flex mb-3">
                            <i class="fas fa-envelope text-primary me-3 mt-1"></i>
                            <span class="text-white-50">info@tamlyvn.com</span>
                        </li>
                        <li class="d-flex">
                            <i class="fas fa-clock text-primary me-3 mt-1"></i>
                            <span class="text-white-50">Hỗ trợ: 24/7</span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="border-top border-secondary mt-4">
            <div class="container">
                <div class="row py-4">
                    <div class="col-md-6 text-center text-md-start">
                        <p class="mb-md-0 text-white-50">© 2025 MentalHealthSupport. Tất cả quyền được bảo lưu.</p>
                    </div>
                    <div class="col-md-6 text-center text-md-end">
                        <a href="#" class="text-white-50 text-decoration-none me-4">Điều Khoản Sử Dụng</a>
                        <a href="#" class="text-white-50 text-decoration-none">Chính Sách Bảo Mật</a>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <!-- Scripts -->
    <!-- Scripts -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // Preloader
        $(window).on('load', function () {
            $('#preloader').fadeOut(1000);
        });

        // Navbar scroll
        $(window).scroll(function() {
            if ($(window).scrollTop() > 50) {
                $('.navbar').addClass('navbar-scrolled');
            } else {
                $('.navbar').removeClass('navbar-scrolled');
            }
        });

        //CHAT
        class SignalRChat {
            constructor() {
                this.connection = null;
                this.chatSessionId = null;
                this.userId = 1; // Replace with actual user ID from session
                this.isActive = false;
                this.init();
            }

            init() {
                this.initSignalR();
                this.bindEvents();
            }

            initSignalR() {
                // Initialize SignalR connection
                this.connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chatHub")
                    .build();

                // Handle receiving messages
                this.connection.on("ReceiveMessage", (senderId, message) => {
                    this.addMessage(message, senderId === this.userId ? 'user' : 'expert');
                });

                // Handle chat started
                this.connection.on("ChatStarted", (chatSessionId) => {
                    console.log("Chat started with session ID: ", chatSessionId);
                    this.chatSessionId = chatSessionId;
                    this.updateStatus(true);
                    this.addSystemMessage("Đã kết nối với chuyên gia. Bạn có thể bắt đầu trò chuyện!");
                });

                // Handle chat ended
                this.connection.on("ChatEnded", () => {
                    console.log("Chat ended");
                    this.updateStatus(false);
                    this.addSystemMessage("Cuộc trò chuyện đã kết thúc.");
                    setTimeout(() => {
                        $('#chatModal').modal('hide');
                    }, 2000);
                });

                // Start connection
                this.connection.start()
                    .then(() => {
                        console.log("SignalR Connected");
                    })
                    .catch(err => {
                        console.error("SignalR Connection Error:", err);
                        this.addSystemMessage("Lỗi kết nối. Vui lòng thử lại sau.");
                    });
            }

            bindEvents() {
                // Open modal
                document.getElementById("openChatModal").addEventListener("click", () => {
                    $('#chatModal').modal('show');
                });

                // Send message
                document.getElementById("sendButton").addEventListener("click", () => {
                    this.sendMessage();
                });

                // Start chat
                document.getElementById("startChat").addEventListener("click", async () => {
                    await this.startChat();
                });

                // End chat
                document.getElementById("endChat").addEventListener("click", () => {
                    this.endChat();
                });

                // Enter key to send
                document.getElementById("messageInput").addEventListener("keypress", (e) => {
                    if (e.which === 13 || e.key === 'Enter') {
                        this.sendMessage();
                    }
                });
            }

            async sendMessage() {
                const messageInput = document.getElementById("messageInput");
                const message = messageInput.value.trim();
                
                if (!message || !this.isActive || !this.chatSessionId) {
                    return;
                }

                try {
                    await this.connection.invoke("SendMessage", this.chatSessionId, this.userId, message);
                    messageInput.value = "";
                } catch (err) {
                    console.error("Send message error:", err);
                    this.addSystemMessage("Lỗi gửi tin nhắn. Vui lòng thử lại.");
                }
            }

            async startChat() {
                try {
                    this.addSystemMessage("Đang tìm chuyên gia...", "info");
                    
                    // Call API to assign consultant
                    const response = await fetch('/Account/AssignConsultant', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ userId: this.userId })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to assign consultant');
                    }

                    const data = await response.json();
                    const consultantId = data.consultantId;

                    // Start chat via SignalR
                    await this.connection.invoke("StartChat", this.userId, consultantId);
                    
                } catch (err) {
                    console.error("Start chat error:", err);
                    this.addSystemMessage("Không thể bắt đầu chat. Vui lòng thử lại.", "error");
                }
            }

            endChat() {
                if (!this.chatSessionId) return;

                try {
                    this.connection.invoke("EndChat", this.chatSessionId);
                } catch (err) {
                    console.error("End chat error:", err);
                }
            }

            updateStatus(isOnline) {
                this.isActive = isOnline;
                const startBtn = document.getElementById('startChat');
                const endBtn = document.getElementById('endChat');
                const sendBtn = document.getElementById('sendButton');
                const messageInput = document.getElementById('messageInput');
                const statusBadge = document.getElementById('statusBadge');

                if (isOnline) {
                    startBtn.disabled = true;
                    endBtn.disabled = false;
                    sendBtn.disabled = false;
                    messageInput.disabled = false;
                    statusBadge.className = 'badge bg-success ms-3';
                    statusBadge.innerHTML = '<span class="status-dot online me-1"></span>Online';
                    messageInput.focus();
                } else {
                    startBtn.disabled = false;
                    endBtn.disabled = true;
                    sendBtn.disabled = true;
                    messageInput.disabled = true;
                    statusBadge.className = 'badge bg-danger ms-3';
                    statusBadge.innerHTML = '<span class="status-dot offline me-1"></span>Offline';
                    this.chatSessionId = null;
                }
            }

            addMessage(text, sender) {
                const chatBox = document.getElementById('chatBox');
                const emptyState = document.getElementById('emptyState');
                
                if (emptyState) {
                    emptyState.remove();
                }

                const messageDiv = document.createElement('div');
                messageDiv.className = `mb-3 chat-${sender}`;
                
                const time = new Date().toLocaleTimeString('vi-VN', {
                    hour: '2-digit', 
                    minute: '2-digit'
                });
                
                messageDiv.innerHTML = `
                    <div class="message-bubble-${sender} p-2 rounded">
                        ${text}
                    </div>
                    <small class="text-muted d-block mt-1">${time}</small>
                `;

                chatBox.appendChild(messageDiv);
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            addSystemMessage(text, type = "info") {
                const chatBox = document.getElementById('chatBox');
                const emptyState = document.getElementById('emptyState');
                
                if (emptyState) {
                    emptyState.remove();
                }

                const messageDiv = document.createElement('div');
                messageDiv.className = 'mb-3 text-center';
                
                const badgeClass = type === "error" ? "bg-danger" : 
                                 type === "info" ? "bg-info" : "bg-secondary";
                
                messageDiv.innerHTML = `
                    <span class="badge ${badgeClass}">
                        <i class="fas fa-info-circle me-1"></i>
                        ${text}
                    </span>
                `;

                chatBox.appendChild(messageDiv);
                chatBox.scrollTop = chatBox.scrollHeight;
            }

            clearChat() {
                const chatBox = document.getElementById('chatBox');
                chatBox.innerHTML = `
                    <div class="text-center text-muted" id="emptyState">
                        <i class="fas fa-comments fa-3x mb-3 text-secondary"></i>
                        <p>Chưa có tin nhắn nào. Bắt đầu cuộc trò chuyện!</p>
                    </div>
                `;
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            // Note: Make sure SignalR library is loaded before this
            if (typeof signalR !== 'undefined') {
                new SignalRChat();
            } else {
                console.error('SignalR library not found. Please include SignalR script.');
                // Fallback: Show error message
                document.getElementById('openChatModal').addEventListener('click', () => {
                    alert('SignalR chưa được cấu hình. Vui lòng liên hệ quản trị viên.');
                });
            }
        });
    </script>
</body>
</html>